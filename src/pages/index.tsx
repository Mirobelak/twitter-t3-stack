import { type NextPage } from "next";
import Head from "next/head";
import { SignIn, useUser } from "@clerk/clerk-react";
import { SignInButton } from "@clerk/nextjs";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage} from "~/components/Loading";
import { useState } from "react";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {

  const { user } = useUser();

  const [input, setInput] = useState<string>("");

  const ctx = api.useContext();

  const {mutate, isLoading: isPosting} = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("") // clear input on success
     void ctx.posts.getAll.invalidate()}
  });


  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
        src={user.profileImageUrl}
        alt="users profile picture"
      />
      <input
        placeholder="Type Some Emojis !"
        className="grow bg-transparent outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      <button onClick={() => mutate({content: input})}>Post</button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = ({ post, author }: PostWithUser) => {
  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        className="h-14 w-14 rounded-full"
        src={author.profileImageUrl}
        alt="users profile picture"
        width={56}
        height={56}
        placeholder="blur"
        blurDataURL={author.profileImageUrl}
      />
      <div className="flex flex-col gap-2">
        <div className="flex text-slate-300">
          <span>{author.username}</span>
          <span className="font-thin">-{dayjs(post.createdAt).fromNow()}</span>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if(postsLoading) return <LoadingPage/>

  if(!data) return <div>Something went wrong</div>

  return(
    <div className="flex flex-col">
            {data.map((fullPost) => (
              <PostView {...fullPost} key={fullPost.post.id} />
            ))}
    </div>
  )

}

const Home: NextPage = () => {
  const {isLoaded: userLoaded, isSignedIn} = useUser();
 
  //start fetching asap - in React Query you fetch only once and then use cached data
  api.posts.getAll.useQuery();

  // return empty div if user is not loaded yet
  if(!userLoaded) return <div/>

  

  return (
    <>
      <Head>
        <title>Twitter T3</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center ">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
          <Feed/>
        </div>
      </main>
    </>
  );
};

export default Home;
